var L = webpplMouselab;
var round = function(x, p) {Math.round(x * Math.pow(10, p)) / Math.pow(10, p)}

// var vals = function(mu,sigma) {
//   // Temporarily hardcoding the values...
//   // map(function(x) {mu + x * sigma}, [-2, -1, 1, 2])
//   // [-15, -5, 5, 15]
//   [-20.0, -12.0, -4.0, 4.0, 12.0, 20.0]
// };


// var probs = function() {
//   // [0.159,  0.341,  0.341,  0.159]
//   [0.055, 0.157, 0.288, 0.288, 0.157, 0.055]
// };
// globalStore.cost = -1
// globalStore.reward = Categorical({vs: vals(1, 2),
//                                   ps: probs()});

// Run 10 rollouts of the given policy, return average total reward.
var run = function(policy, samples, name) {
  var result = timeit(function() {
    return Infer({model() {
      simulate(policy);
    }, 
    method: 'forward', samples: samples || 10,
      // method: 'enumerate'  // integrate out all possible outcomes (slow!)
    });
  });
  var avgUtil = expectation(Infer({model() {
    sum(sample(result.value).rewards)}
  }));
  var avgNumObs = expectation(Infer({model() {
    sample(result.value).actions.length - 1}
  }));
  console.log(
    (name || 'run'), ':',
    round(avgUtil, 3), ' ',
    round(avgNumObs, 3), ' ',
    result.runtimeInMilliseconds
  )
  return avgUtil
}

// This function doesn't work because vals and probs
// are harcoded above.
var testParams = function(mu, sigma) {
  globalStore.reward = Categorical({vs: vals(mu, sigma),
                                    ps: probs()});
  var policy = enumPolicy();
  run(policy, 1000, 'N('+mu+', '+sigma+')')
};

var evalPolicyWeights = function() {
  // var weights = JSON.parse(argv.weights)
  var weights = [ -0.034821394751660226, 4.177078845688222, 1.216868835535616, 6.726366072163112, -1.1604972774449753 ];
  console.log('weights', weights)
  var Q = makeQ_meta(weights);
  var policy = maxQPolicy(Q);
  run(policy, 100, 'result')
};

var weights = [
  2.4857394663934516,
  0.28211991705144657,
  0.13838972719540021,
  0.5287532348896062,
  0.9976719707175685
];
var PRinfo = makePRinfo(weights);
var Q_meta = makeQ_meta(weights)
globalStore.cost = -1.;

var state = [0, "__", "__", "__", "__", -12, "__", "__", "__", "__", "__", "__", "__", "__", "__", "__", "__"];
var action = 9;
// PRinfo({
//   state: state,
//   action: 1
// });


console.log(Q_meta(state, 1))
console.log(Q_meta(state, 9))

''
// var result = timeit(function() {
//   sample(inferWeights())
// });
// console.log(result)

// var weights = result.value.weights;
// run(maxQPolicy(makeQ_meta(weights)), 10000, 'SMC')
// run(maxQPolicy(makeQ_meta([-4.5318, -0.47478, 30.0, 30.0, -9.20915])), 10000, 'BO')

// var state = L.updateList(env.initialState, 1, 5)
// timeit(function() {
//   // calculatePR({state: env.initialState, action: 1})
//   VPI_full(state)
// })


// globalStore.cost = -1
// var env = mouselabProblem({reward: globalStore.reward, cost: globalStore.cost})();

// var Q_meta = makeQ_meta([1,1,0,0,1]);
// Q_meta(env.initialState, 1)



