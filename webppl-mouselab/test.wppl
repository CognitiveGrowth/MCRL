var L = webpplMouselab;

var round = function(x, p) {Math.round(x * Math.pow(10, p)) / Math.pow(10, p)}
var vals = function(mu,sigma) {
  map(function(x) {mu + x * sigma}, [-2, -1, 1, 2])
};
var probs = function() {
  [.15, .35, .35, .15]
};
globalStore.cost = 0
globalStore.reward = Categorical({vs: vals(1, 2),
                                  ps: probs()});
// globalStore.reward = Categorical({vs: [-10, -2, 2, 10],
//                                   ps: [0.1, 0.4, 0.4, 0.1]});


var run = function(name, policy) {
  var result = timeit(function() {
    return Infer({model() {
        var s = simulate(policy);
        return s
      }, 
      method: 'forward', samples: 1000
      // method: 'enumerate'
    });

  });
  console.log(
    name, ':',
    round(expectation(Infer({model() {sum(sample(result.value).rewards)}})), 3), ' ',
    round(expectation(Infer({model() {sample(result.value).actions.length - 1}})), 3), ' ',
    result.runtimeInMilliseconds
  )
}

var testParams = function(mu, sigma) {
  globalStore.reward = Categorical({vs: vals(mu, sigma),
                                    ps: probs()});
  run('N('+mu+', '+sigma+')', enumPolicy({
    // maxExecutions: 3,
    // lookahead: lookahead,
    // myActions(state) {
      // L.firstUnobserved(actions(state)).concat([TERM_ACTION])
    // }
  }));
};

console.log(
  actions(env.initialState),
  V_meta(env.initialState)
)


// Q_meta(env.initialState, 1)
// VOC_1(env.initialState, 1)
// VPI_full(env.initialState)
// console.log(env.initialState)
// console.log(JSON.stringify(obsTree(env.initialState, [])))
// console.log(JSON.stringify())



// console.log([
//   // globalStore.V.cache.length,
//   globalStore.Q.cache.length,
//   // globalStore.policy.cache.length,
// ])
// var env = L.buildCross(2, 2)
// env.hashState(env.initialState)

// testParams(-1, 8, 3)
// testParams(-1, 8, 4)
// testParams(-1, 8, 5)
// testParams(-1, 8, 10000)
// testParams(3, 2)

// testParams(-1, 8)
// testParams(0, 8)
// testParams(1, 8)

// var pol = enumPolicy()
// repeat(100, function() {sum(simulate(pol).rewards)})


// globalStore.reward = Categorical({vs: vals(-1, 8),
//                                   ps: probs()});
// simulate(enumPolicy({
//   lookahead: 2
// }))

// L.firstUnobserved(['a', 'aa', 'b', 'ccc'])


