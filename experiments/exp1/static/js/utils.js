// Generated by CoffeeScript 1.12.3
var assert, check, checkObj, checkWindowSize, converter, deepLoadJson, deepMap, delay, fmtMoney, format_date, format_time, getTime, img, loadJson, mapObject, markdown, mean, reformatTrial, sum, zip,
  slice = [].slice;

converter = new showdown.Converter();

markdown = function(txt) {
  return converter.makeHtml(txt);
};

getTime = function() {
  return (new Date).getTime();
};

format_time = function(date) {
  if (date == null) {
    date = null;
  }
  if (date == null) {
    date = new Date;
  }
  return date.toLocaleTimeString([], {
    hour: '2-digit',
    minute: '2-digit'
  });
};

format_date = function(date) {
  if (date == null) {
    date = null;
  }
  if (date == null) {
    date = new Date;
  }
  return date.toLocaleDateString([], {
    day: '2-digit',
    month: '2-digit'
  });
};

img = function(name) {
  return "<img class='display' src='static/images/" + name + "'/>";
};

fmtMoney = function(v) {
  return '$' + v.toFixed(2);
};

reformatTrial = function(old) {
  var trial;
  trial = {
    trialID: old.trial_i,
    graph: null,
    initialState: old.initial
  };
  return trial;
};

delay = function(time, func) {
  return setTimeout(func, time);
};

loadJson = function(file) {
  var result;
  result = $.ajax({
    dataType: 'json',
    url: file,
    async: false
  });
  return result.responseJSON;
};

zip = function() {
  var rows;
  rows = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return rows[0].map(function(_, c) {
    return rows.map(function(row) {
      return row[c];
    });
  });
};

check = function(name, val) {
  if (val === void 0) {
    throw new Error(name + "is undefined");
  }
  return val;
};

mean = function(xs) {
  return (sum(xs)) / xs.length;
};

sum = function(xs) {
  return xs.reduce((function(acc, x) {
    return acc + x;
  }));
};

checkObj = function(obj, keys) {
  var i, k, len;
  if (keys == null) {
    keys = Object.keys(obj);
  }
  for (i = 0, len = keys.length; i < len; i++) {
    k = keys[i];
    if (obj[k] === void 0) {
      console.log('Bad Object: ', obj);
      throw new Error(k + " is undefined");
    }
  }
  return obj;
};

assert = function(val) {
  if (!val) {
    throw new Error('Assertion Error');
  }
  return val;
};

checkWindowSize = function(width, height, display) {
  var maxHeight, win_width;
  win_width = $(window).width();
  maxHeight = $(window).height();
  if ($(window).width() < width || $(window).height() < height) {
    display.hide();
    return $('#window_error').show();
  } else {
    $('#window_error').hide();
    return display.show();
  }
};

mapObject = function(obj, fn) {
  return Object.keys(obj).reduce(function(res, key) {
    res[key] = fn(obj[key]);
    return res;
  }, {});
};

deepMap = function(obj, fn) {
  var deepMapper;
  deepMapper = function(val) {
    if (typeof val === 'object') {
      return deepMap(val, fn);
    } else {
      return fn(val);
    }
  };
  if (Array.isArray(obj)) {
    return obj.map(deepMapper);
  }
  if (typeof obj === 'object') {
    return mapObject(obj, deepMapper);
  } else {
    return obj;
  }
};

deepLoadJson = function(file) {
  var replaceFileName;
  replaceFileName = function(f) {
    var o;
    if (typeof f === 'string' && f.endsWith('.json')) {
      o = loadJson(f);
      o._json = f;
      return o;
    } else {
      return f;
    }
  };
  return deepMap(loadJson(file), replaceFileName);
};

function argmax(arr) {
    if (arr.length === 0) {
        return -1;
    }

    var max = arr[0];
    var maxIndex = [0];

    for (var i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            maxIndex = [i];
            max = arr[i];
        }
        else{
            if (arr[i] == max){
                maxIndex.push(i)
            }
        }
    }

    return maxIndex;
};
