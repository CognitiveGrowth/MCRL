// Generated by CoffeeScript 1.12.3
var FUNCTIONS, callWebppl, startWebppl;

FUNCTIONS = "{\n  initialize() {\n    null\n  },\n  flip() {\n    flip()\n  },\n  sampleMean(param) {\n    expectation(Infer({model() {\n      gaussian(param.mu, param.sigma)\n    }, method:'forward', samples:param.nSample}))\n  },\n  PR(arg) {\n    calculatePR(arg)\n  },\n  getQV(arg) {\n    return {\n      Qs: map(function(action) {Q_meta(arg.state, action)}, actions(arg.state)),\n      Q: Q_meta(arg.state, arg.action),\n      V: V_meta(arg.state)\n    }\n  }\n}";

startWebppl = function() {
  var callWebppl, callback, code, resolveResult, resolveWebppl, resultPromise, store, webpplPromise;
  resolveResult = void 0;
  resultPromise = new Promise(function(resolve) {
    return resolveResult = resolve;
  });
  resolveWebppl = void 0;
  webpplPromise = new Promise(function(resolve) {
    return resolveWebppl = resolve;
  });
  callWebppl = function(kind, arg) {
    return webpplPromise.then(function(runWebppl) {
      resultPromise = new Promise(function(resolve) {
        return resolveResult = resolve;
      });
      webpplPromise = new Promise(function(resolve) {
        return resolveWebppl = resolve;
      });
      runWebppl([kind, arg]);
      return resultPromise;
    });
  };
  store = {
    _return2js: function(result, callback) {
      resolveResult(result);
      return resolveWebppl(callback);
    }
  };
  code = "var loop = function(request) {\n  var _functions = " + FUNCTIONS + "\n  var funcName = request[0];\n  var arg = request[1];\n  var func = _functions[funcName];\n  loop(callAsync(globalStore._return2js, func(arg)))\n}\nloop(['initialize'])";
  callback = function(s, val) {
    return console.log('Terminated webppl session.');
  };
  webppl.run(code, callback, {
    initialStore: store
  });
  return callWebppl;
};

callWebppl = startWebppl();
