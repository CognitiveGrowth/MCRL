// Generated by CoffeeScript 2.2.2
// coffeelint: disable=max_line_length, indentation
var BLOCKS, CONDITION, DEBUG, DEMO, DEMO_TRIALS, N_TRIAL, PARAMS, SCORE, SHOW_PARTICIPANT, STAGE, STAGE1, STAGE2, STRUCTURE_TEST, STRUCTURE_TRAINING, TALK, TRIALS_TEST, TRIALS_TRAINING, calculateBonus, createStartButton, delay, getTestTrials, getTrainingTrials, initializeExperiment, loadTimeout, psiturk, saveData, slowLoad, with_feedback;

DEBUG = true;

TALK = false;

SHOW_PARTICIPANT = false;

STAGE = 1;

STAGE1 = STAGE === 1;

STAGE2 = STAGE === 2;

if (DEBUG) {
  console.log("X X X X X X X X X X X X X X X X X\n X X X X X DEBUG  MODE X X X X X\nX X X X X X X X X X X X X X X X X");
  CONDITION = 1;
} else {
  console.log("# =============================== #\n# ========= NORMAL MODE ========= #\n# =============================== #");
  console.log('16/01/18 12:38:03 PM');
  CONDITION = parseInt(condition);
}

if (mode === "{{ mode }}") {
  DEMO = true;
  CONDITION = 1;
}

with_feedback = CONDITION > 0;

BLOCKS = void 0;

PARAMS = void 0;

TRIALS_TRAINING = void 0;

TRIALS_TEST = void 0;

DEMO_TRIALS = void 0;

STRUCTURE_TEST = void 0;

STRUCTURE_TRAINING = void 0;

N_TRIAL = void 0;

SCORE = 0;

calculateBonus = void 0;

getTrainingTrials = void 0;

getTestTrials = void 0;

psiturk = new PsiTurk(uniqueId, adServerLoc, mode);

psiturk.recordUnstructuredData('condition', CONDITION);

psiturk.recordUnstructuredData('with_feedback', with_feedback);

PARAMS = {
  inspectCost: 1,
  startTime: Date(Date.now()),
  bonusRate: .002,
  // variance: ['2_4_24', '24_4_2'][CONDITION]
  branching: '312',
  with_feedback: with_feedback,
  condition: CONDITION
};

delay = function(time, func) {
  return setTimeout(func, time);
};

// $(window).resize -> checkWindowSize 920, 720, $('#jspsych-target')
// $(window).resize()
slowLoad = function() {
  var ref;
  return (ref = $('slow-load')) != null ? ref.show() : void 0;
};

loadTimeout = delay(12000, slowLoad);

createStartButton = function() {
  if (DEBUG) {
    initializeExperiment();
    return;
  }
  document.getElementById("loader").style.display = "none";
  document.getElementById("successLoad").style.display = "block";
  document.getElementById("failLoad").style.display = "none";
  return $('#load-btn').click(initializeExperiment);
};

saveData = function() {
  return new Promise(function(resolve, reject) {
    var timeout;
    timeout = delay(10000, function() {
      return reject('timeout');
    });
    return psiturk.saveData({
      error: function() {
        clearTimeout(timeout);
        console.log('Error saving data!');
        return reject('error');
      },
      success: function() {
        clearTimeout(timeout);
        console.log('Data saved to psiturk server.');
        return resolve();
      }
    });
  });
};

$(window).resize(function() {
  return checkWindowSize(800, 600, $('#jspsych-target'));
});

$(window).resize();

$(window).on('load', function() {
  // Load data and test connection to server.
  slowLoad = function() {
    var ref;
    return (ref = $('slow-load')) != null ? ref.show() : void 0;
  };
  loadTimeout = delay(12000, slowLoad);
  psiturk.preloadImages(['static/images/spider.png']);
  return delay(300, function() {
    var id;
    console.log('Loading data');
    psiturk.recordUnstructuredData('params', PARAMS);
    if (PARAMS.variance) {
      id = `${PARAMS.branching}_${PARAMS.variance}`;
    } else {
      id = `${PARAMS.branching}`;
    }
    STRUCTURE_TEST = loadJson("static/json/structure/31123.json");
    STRUCTURE_TRAINING = loadJson("static/json/structure/312.json");
    //TRIALS = loadJson "static/json/mcrl_trials/increasing.json"
    TRIALS_TEST = loadJson("static/json/rewards/31123_increasing1.json");
    console.log(`loaded ${(TRIALS_TEST != null ? TRIALS_TEST.length : void 0)} test trials`);
    TRIALS_TRAINING = loadJson("static/json/mcrl_trials/increasing.json");
    console.log(`loaded ${(TRIALS_TRAINING != null ? TRIALS_TRAINING.length : void 0)} training trials`);
    getTrainingTrials = (function() {
      var idx, t;
      t = _.shuffle(TRIALS_TRAINING);
      idx = 0;
      return function(n) {
        idx += n;
        return t.slice(idx - n, idx);
      };
    })();
    getTestTrials = (function() {
      var idx, t;
      t = _.shuffle(TRIALS_TEST);
      idx = 0;
      return function(n) {
        idx += n;
        return t.slice(idx - n, idx);
      };
    })();
    if (DEBUG || TALK) {
      createStartButton();
      return clearTimeout(loadTimeout);
    } else {
      console.log('Testing saveData');
      if (DEMO) {
        clearTimeout(loadTimeout);
        return delay(500, createStartButton);
      } else {
        return saveData().then(function() {
          clearTimeout(loadTimeout);
          return delay(500, createStartButton);
        }).catch(function() {
          clearTimeout(loadTimeout);
          return $('#data-error').show();
        });
      }
    }
  });
});

createStartButton = function() {
  if (DEBUG || TALK) {
    initializeExperiment();
    return;
  }
  if (DEMO) {
    $('#jspsych-target').append("<div class='alert alert-info'>\n  <h3>Demo mode</h3>\n\n  To go through the task as if you were a participant,\n  click <b>Begin</b> above.<br>\n  To view replays of the participants\n  in our study, click <b>View Replays</b> below.\n</div>\n<div class='center'>\n  <button class='btn btn-primary btn-lg centered' id=\"view-replays\">View Replays</button>\n</div>");
    $('#view-replays').click(function() {
      SHOW_PARTICIPANT = true;
      DEMO_TRIALS = _.shuffle(loadJson("static/json/demo/312.json"));
      return initializeExperiment();
    });
  }
  $('#load-icon').hide();
  $('#slow-load').hide();
  $('#success-load').show();
  return $('#load-btn').click(initializeExperiment);
};

initializeExperiment = function() {
  var Block, ButtonBlock, MouselabBlock, QuizLoop, TextBlock, ask_email, bonus_text, check_code, check_returning, divider, divider_pretest_training, divider_training_test, experiment_timeline, finish, fullMessage, img, post_test, pre_test, pre_test_intro1, pre_test_intro2, prompt_resubmit, quiz, reprompt, reset_score, retention_instruction, save_data, talk_demo, test_block_intro, text, train_basic1, training, verbal_responses;
  $('#jspsych-target').html('');
  console.log('INITIALIZE EXPERIMENT');
  //  ======================== #
  //  ========= TEXT ========= #
  //  ======================== #

  // These functions will be executed by the jspsych plugin that
  // they are passed to. String interpolation will use the values
  // of global variables defined in this file at the time the function
  // is called.
  text = {
    debug: function() {
      if (DEBUG) {
        return "`DEBUG`";
      } else {
        return '';
      }
    },
    return_window: function() {
      var cutoff, tomorrow;
      cutoff = new Date(RETURN_TIME.getTime() + 1000 * 60 * 60 * PARAMS.delay_window);
      tomorrow = RETURN_TIME.getDate() > (new Date).getDate() ? 'tomorrow' : '';
      return `<b>${tomorrow}\nbetween ${format_time(RETURN_TIME)}\nand ${format_time(cutoff)}</b>`;
    },
    feedback: function() {
      if (STAGE2) {
        return [];
      } else {
        return "";
      }
    }
  };
  // ================================= #
  // ========= BLOCK CLASSES ========= #
  // ================================= #
  Block = class Block {
    constructor(config) {
      _.extend(this, config);
      this._block = this; // allows trial to access its containing block for tracking state
      if (this._init != null) {
        this._init();
      }
    }

  };
  TextBlock = (function() {
    class TextBlock extends Block {};

    TextBlock.prototype.type = 'text';

    TextBlock.prototype.cont_key = [];

    return TextBlock;

  }).call(this);
  ButtonBlock = (function() {
    class ButtonBlock extends Block {};

    ButtonBlock.prototype.type = 'button-response';

    ButtonBlock.prototype.is_html = true;

    ButtonBlock.prototype.choices = ['Continue'];

    ButtonBlock.prototype.button_html = '<button class="btn btn-primary btn-lg">%choice%</button>';

    return ButtonBlock;

  }).call(this);
  QuizLoop = class QuizLoop extends Block {
    loop_function(data) {
      var c, j, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (!c) {
          return true;
        }
      }
      return false;
    }

  };
  MouselabBlock = (function() {
    class MouselabBlock extends Block {};

    MouselabBlock.prototype.type = 'mouselab-mdp';

    MouselabBlock.prototype.playerImage = 'static/images/spider.png';

    // moveDelay: PARAMS.moveDelay
    // clickDelay: PARAMS.clickDelay
    // moveEnergy: PARAMS.moveEnergy
    // clickEnergy: PARAMS.clickEnergy
    MouselabBlock.prototype.lowerMessage = "<b>Clicking on a node reveals its value for a $1 fee.<br>\nMove with the arrow keys.</b>";

    return MouselabBlock;

  }).call(this);
  //_init: ->
  //_.extend(this, STRUCTURE)
  //  @trialCount = 0

  //  ============================== #
  //  ========= EXPERIMENT ========= #
  //  ============================== #
  img = function(name) {
    return `<img class='display' src='static/images/${name}.png'/>`;
  };
  QuizLoop = class QuizLoop extends Block {
    loop_function(data) {
      var c, j, len, ref;
      console.log('data', data);
      ref = data[data.length].correct;
      for (j = 0, len = ref.length; j < len; j++) {
        c = ref[j];
        if (!c) {
          return true;
        }
      }
      return false;
    }

  };
  // instruct_loop = new Block
  //   timeline: [instructions, quiz]
  //   loop_function: (data) ->
  //     for c in data[1].correct
  //       if not c
  //         return true  # try again
  //     psiturk.finishInstructions()
  //     psiturk.saveData()
  //     return false
  check_code = new Block({
    type: 'secret-code',
    code: 'elephant'
  });
  check_returning = (function() {
    var TEST_TRIALS, i, return_time, stage1, worker_id;
    console.log('worker', uniqueId);
    worker_id = uniqueId.split(':')[0];
    stage1 = (loadJson('static/json/stage1.json'))[worker_id];
    if (stage1 != null) {
      console.log('stage1.return_time', stage1.return_time);
      return_time = new Date(stage1.return_time);
      console.log('return_time', return_time);
      if (getTime() > return_time) {
        // Redefine test trials to match breakdown established in stage 1.
        TEST_TRIALS = (function() {
          var j, len, ref, results;
          ref = stage1.test_idx;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            i = ref[j];
            results.push(TRIALS[i]);
          }
          return results;
        })();
        SCORE += stage1.score;
        return new Block({
          type: 'button-response',
          is_html: true,
          choices: ['Continue'],
          button_html: '<button id="return-continue" class="btn btn-primary btn-lg">%choice%</button>',
          stimulus: function() {
            return markdown(`# Welcome back\n\nThanks for returning to complete Stage 2! Your current bonus is\n**$${calculateBonus().toFixed(2)}**. In this stage you'll have ${N_TEST} rounds to\nincrease your bonus.\n\nBefore you begin, you will review the instructions and take another\nquiz.`);
          }
        });
      } else {
        return new Block({
          type: 'text',
          cont_key: [null],
          text: function() {
            return markdown(`# Stage 2 not ready yet\n\nYou need to wait ${PARAMS.delay_hours} hours after completing Stage 1 before\nyou can begin Stage 2. You can begin the HIT at\n${format_time(return_time)} on ${format_date(return_time)}`);
          }
        });
      }
    } else {
      // **If you return the HIT, you may not be able to take it again later.**
      // Please leave the HIT open until it is time for you to complete Stage 2.
      return new Block({
        type: 'text',
        cont_key: [null],
        text: function() {
          return markdown("# Stage 1 not completed\n\nWe can't find you in our database. This is the second part of a two-part\nexperiment. If you did not complete the first stage, please\nreturn this HIT. If you did complete Stage 1, please email\ncocosci.turk@gmail.com to report the error.");
        }
      });
    }
  })();
  retention_instruction = new Block({
    type: 'button-response',
    is_html: true,
    choices: ['Continue'],
    button_html: '<button class="btn btn-primary btn-lg">%choice%</button>',
    stimulus: function() {
      return markdown(`# You are beginning a two-part experiment\n\nThis experiment has two stages which you will complete in separate HITs.\nThe total base payment for both hits is $1.75, plus a **performance-dependent\nbonus** of up to $3.50 ($2.50 is a typical bonus).\n\nStage 1 takes about 15 minutes, and you will receive $0.75 when you\ncomplete it. You will complete Stage 2 in a second HIT.\nYou can begin the second HIT ${text.return_window()}.\nIf you do not begin the HIT within this time frame, you will not receive the\nsecond base payment or any bonus.\n\nUpon completing Stage 2, you will receive $1.00 plus your bonus of\nup to $3.50.<br>**By completing both stages, you can make up to\n$5.25**.\n\n<div class="alert alert-warning">\n  Only continue if you can complete the second (~10 minute) HIT which\n  which will be available ${text.return_window()}.\n</div>`);
    }
  });
  ask_email = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown(`# You've completed Stage 1\n\nSo far, you've earned a bonus of **$${calculateBonus().toFixed(2)}**.\nYou will receive this bonus, along with the additional bonus you earn \nin Stage 2 when you complete the second HIT. If you don't complete\nthe second HIT, you will give up the bonus you have earned.\n\nThe HIT for Stage 2 will have the title "Part 2 of two-part decision-making experiment"\nRemember, you must begin the HIT ${text.return_window()}.\n**Note:** The official base pay on mTurk will be $0.01;\nyou'll receive the $1 base pay for Stage 2 as part of your bonus \n(in addition to the bonus you earn).`);
    },
    questions: ['If you would like a reminder email, you can optionally enter it here.'],
    button: 'Submit HIT'
  });
  if (STAGE1) {
    finish = new Block({
      type: 'button-response',
      stimulus: function() {
        return markdown(`# You've completed Stage 1\n\nRemember to come back ${text.return_window()} to complete Stage 2.\nThe HIT will be titled "Part 2 of two-part decision-making\nexperiment". **Note:** The official base pay on mTurk will be $0.01;\nyou'll receive the $1 base pay for Stage 2 as part of your bonus \n(in addition to the bonus you earn).\n\nSo far, you've earned a bonus of **$${calculateBonus().toFixed(2)}**.\nYou will receive this bonus, along with the additional bonus you earn \nin Stage 2 when you complete the second HIT. If you don't complete\nthe second HIT, you give up the bonus you have already earned.`);
      },
      is_html: true,
      choices: ['Submit HIT'],
      button_html: '<button class="btn btn-primary btn-lg">%choice%</button>'
    });
  } else {
    finish = new Block({
      type: 'survey-text',
      preamble: function() {
        return markdown(`# You've completed the HIT\n\nThanks for participating. We hope you had fun! Based on your\nperformance, you will be awarded a bonus of\n**$${calculateBonus().toFixed(2)}**.\n\nPlease briefly answer the questions below before you submit the HIT.`);
      },
      questions: ['How did you go about planning the route of the airplane?', 'Did you learn anything about how to plan better?', 'How old are you?', 'Which gender do you identify with?'],
      rows: [4, 4, 1, 1],
      button: 'Submit HIT'
    });
  }
  fullMessage = "";
  reset_score = new Block({
    type: 'call-function',
    func: function() {
      return SCORE = 0;
    }
  });
  divider = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<div style='text-align: center;'> Press <code>space</code> to continue.</div>";
    }
  });
  divider_training_test = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<div style='text-align: left;'> Congratulations! You have completed the training block. <br/> <br/> Press <code>space</code> to start the test block.</div>";
    }
  });
  test_block_intro = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown(` <h1>Test block</h1>\nWelcome to the test block! Here, you can use what you have learned to earn a bonus. Concretely, ${bonus_text('long')} <br/> To thank you for your work so far, we'll start you off with **$100**.\n Good luck! \n <div style='text-align: center;'> Press <code>space</code> to continue. </div>`);
    }
  });
  //divider_intro_training  = new TextBlock
  //    text: ->
  //      SCORE = 0
  //      "  <h1>Training</h1>  Congratulations! You have completed the instructions. Next, you will enter a training block where you can practice planning 10 times. After that, you will enter a test block where you can use what you have learned to earn a bonus. <br/> Press <code>space</code> to start the training block."
  divider_pretest_training = new TextBlock({
    text: function() {
      SCORE = 0;
      return "<h1>Training block</h1> <p> The game you just played is quite complex and it can be rather difficult to get it right. To help you master it, we will now let you practice on a simplified version of this game 10 times. </p> <p> In the simplified version your goal is to find the most profitable route of an airplane across a network of airports. There will be only three steps but otherwise the game works just like the one you just played. </p> <p>After that, there will be a test block where you can use what you have learned to earn a bonus. </p> <br/> Press <code>space</code> to start the training block.</div>";
    }
  });
  train_basic1 = new TextBlock({
    text: function() {
      SCORE = 0;
      return markdown("  <h1> Web of Cash </h1>\n\n  In this HIT, you will play a game called *Web of Cash*. You will guide a\n  money-loving spider through a spider web. When you land on a gray circle\n  (a ***node***) the value of the node is added to your score.\n\n  You will be able to move the spider with the arrow keys, but only in the direction\n  of the arrows between the nodes. The image below shows the web that you will be navigating when the game starts.\n\n <img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash-unrevealed.png'/>\n\n<div align=\"center\">Press <code>space</code> to proceed.</div>");
    }
  });
  //lowerMessage: 'Move with the arrow keys.'
  //stateDisplay: 'never'
  //timeline: getTrials 0

  //   train_basic2 = new MouselabBlock
  //    blockName: 'train_basic2'
  //    stateDisplay: 'always'
  //    prompt: ->
  //      markdown """
  //      ## Some nodes are more important than others

  //{nodeValuesDescription} Please take a look at the example below to see what this means.

  //      Try a few more rounds now!
  //    """
  //    lowerMessage: 'Move with the arrow keys.'
  //    timeline: getTrials 5

  //  train_hidden = new MouselabBlock
  //    blockName: 'train_hidden'
  //    stateDisplay: 'never'
  //    prompt: ->
  //      markdown """
  //      ## Hidden Information

  //      Nice job! When you can see the values of each node, it's not too hard to
  //      take the best possible path. Unfortunately, you can't always see the
  //      value of the nodes. Without this information, it's hard to make good
  //      decisions. Try completing a few more rounds.
  //    """
  //    lowerMessage: 'Move with the arrow keys.'
  //    timeline: getTrials 5

  //  train_inspector = new MouselabBlock
  //    blockName: 'train_inspector'
  // special: 'trainClick'
  //    stateDisplay: 'click'
  //    stateClickCost: 0
  //    prompt: ->
  //      markdown """
  //      ## Node Inspector

  //      It's hard to make good decision when you can't see what you're doing!
  //      Fortunately, you have access to a ***node inspector*** which can reveal
  //      the value of a node. To use the node inspector, simply click on a node.
  //      **Note:** you can only use the node inspector when you're on the first
  //      node.

  //      Trying using the node inspector on a few nodes before making your first
  //      move.
  //    """
  //    # but the node inspector takes some time to work and you can only inspect one node at a time.
  //    timeline: getTrials 1
  // lowerMessage: "<b>Click on the nodes to reveal their values.<b>"

  //  train_inspect_cost = new MouselabBlock
  //    blockName: 'train_inspect_cost'
  //    stateDisplay: 'click'
  //    stateClickCost: PARAMS.inspectCost
  //    prompt: ->
  //      markdown """
  //      ## The price of information

  //      You can use node inspector to gain information and make better
  //      decisions. But, as always, there's a catch. Using the node inspector
  //      costs $#{PARAMS.inspectCost} per node. To maximize your score, you have
  //      to know when it's best to gather more information, and when it's time to
  //      act!
  //    """
  //    timeline: getTrials 1
  bonus_text = function(long) {
    var s;
    // if PARAMS.bonusRate isnt .01
    //   throw new Error('Incorrect bonus rate')
    s = "**you will earn 20 cent for every $100 you make in the game.**";
    if (long) {
      s += " For example, if your final score is $500, you will receive a bonus of $1.";
    }
    return s;
  };
  //  train_final = new MouselabBlock
  //    blockName: 'train_final'
  //    stateDisplay: 'click'
  //    stateClickCost: PARAMS.inspectCost
  //    prompt: ->
  //      markdown """
  //      ## Earn a Big Bonus

  //     Nice! You've learned how to play *Web of Cash*, and you're almost ready
  //      to play it for real. To make things more interesting, you will earn real
  //      money based on how well you play the game. Specifically,
  //      #{bonus_text('long')}

  //      These are the **final practice rounds** before your score starts counting
  //      towards your bonus.
  //    """
  //    lowerMessage: fullMessage
  //    timeline: getTrials 5

  //  train = new Block
  //    training: true
  //    timeline: [
  //      train_basic1
  //       divider    
  //      train_basic2    
  //      divider
  //      train_hidden
  //      divider
  //      train_inspector
  //       divider
  //      train_inspect_cost
  //      divider
  //       train_final
  //    ]
  quiz = new Block({
    preamble: function() {
      return markdown("# Quiz\n");
    },
    type: 'survey-multi-choice',
    questions: ["What is the range of node values in the first step?", "What is the range of node values in the last step?", "What is the cost of clicking?", "How much REAL money do you earn?"],
    options: [['$-4 to $4', '$-8 to $8', '$-48 to $48'], ['$-4 to $4', '$-8 to $8', '$-48 to $48'], ['$0', '$1', '$8', '$24'], ['1 cent for every $1 you make in the game', '1 cent for every $5 you make in the game', '5 cents for every $1 you make in the game', '5 cents for every $10 you make in the game']]
  });
  pre_test_intro1 = new TextBlock({
    text: function() {
      SCORE = 0;
      //prompt: ''
      //psiturk.finishInstructions()
      return markdown("## Node Inspector\n\nIt's hard to make good decision when you can't see what you will get!\nFortunately, you will have access to a ***node inspector*** which can reveal\nthe value of a node. To use the node inspector, simply ***click on a node***. The image below illustrates how this works, and you can try this out on the **next** screen. \n\n**Note:** you can only use the node inspector when you're on the first\nnode. \n\n<img class='display' style=\"width:50%; height:auto\" src='static/images/web-of-cash.png'/>\n\nOne more thing: **You must spend *at least* 7 seconds on each round.**\nIf you finish a round early, you'll have to wait until 7 seconds have\npassed.      \n\n<div align=\"center\"> Press <code>space</code> to continue. </div>\n");
    }
  });
  pre_test_intro2 = new TextBlock({
    text: function() {
      SCORE = 0;
      //prompt: ''
      //psiturk.finishInstructions()
      return markdown("## Get ready!\n\nYou are about to play your first round of Web of Cash. You will notice that the web used in this game is larger than the example you saw in the previous pictures. But that is the only difference, and everything else works as described. Good luck!\n\n<div align=\"center\"> Press <code>space</code> to continue. </div>\n");
    }
  });
  pre_test = new MouselabBlock({
    minTime: 7,
    show_feedback: false,
    blockName: 'pre_test',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: (function() {
      switch (false) {
        case !SHOW_PARTICIPANT:
          return DEMO_TRIALS;
        case !DEBUG:
          return getTestTrials(1);
        default:
          return getTestTrials(1);
      }
    })(),
    startScore: 50,
    _init: function() {
      _.extend(this, STRUCTURE_TEST);
      return this.trialCount = 0;
    }
  });
  training = new MouselabBlock({
    minTime: 7,
    show_feedback: with_feedback,
    blockName: 'training',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: (function() {
      switch (false) {
        case !SHOW_PARTICIPANT:
          return DEMO_TRIALS;
        case !DEBUG:
          return getTrainingTrials(2);
        default:
          return getTrainingTrials(10);
      }
    })(),
    startScore: 50,
    _init: function() {
      _.extend(this, STRUCTURE_TRAINING);
      this.playerImage = 'static/images/plane.png';
      return this.trialCount = 0;
    }
  });
  post_test = new MouselabBlock({
    minTime: 7,
    show_feedback: false,
    blockName: 'test',
    stateDisplay: 'click',
    stateClickCost: PARAMS.inspectCost,
    timeline: (function() {
      switch (false) {
        case !SHOW_PARTICIPANT:
          return DEMO_TRIALS;
        case !DEBUG:
          return getTestTrials(10);
        default:
          return getTestTrials(20);
      }
    })(),
    startScore: 100,
    _init: function() {
      _.extend(this, STRUCTURE_TEST);
      return this.trialCount = 0;
    }
  });
  verbal_responses = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown("# Please answer these questions\n");
    },
    questions: ['How did you decide where to click?', 'How did you decide where NOT to click?', 'How did you decide when to stop clicking?', 'Where were you most likely to click at the beginning of each round?', 'Can you describe anything else about your strategy?'],
    button: 'Finish'
  });
  // TODO: ask about the cost of clicking
  finish = new Block({
    type: 'survey-text',
    preamble: function() {
      return markdown(`# You've completed the HIT\n\nThanks for participating. We hope you had fun! Based on your\nperformance, you will be awarded a bonus of\n**$${calculateBonus().toFixed(2)}**.\n\nPlease briefly answer the questions below before you submit the HIT.`);
    },
    questions: ['What did you learn?', 'Was anything confusing or hard to understand?', 'What is your age?', 'Additional coments?'],
    button: 'Submit HIT'
  });
  talk_demo = new Block({
    timeline: [
      // new MouselabBlock
      //   lowerMessage: 'Move with the arrow keys.'
      //   stateDisplay: 'always'
      //   prompt: null
      //   stateClickCost: PARAMS.inspectCost
      //   timeline: getTrials 3
      divider,
      new MouselabBlock({
        stateDisplay: 'click',
        prompt: null,
        stateClickCost: PARAMS.inspectCost,
        timeline: getTestTrials(4)
      })
    ]
  });
  //  experiment_timeline = switch
  //    when SHOW_PARTICIPANT then [
  //      test
  //    ]
  //    when DEBUG then [
  //      train_basic1
  //      pre_test_intro1
  //      pre_test_intro2
  //      pre_test
  //      divider_pretest_training    
  //      training
  //      divider_training_test
  //      test_block_intro
  //      post_test
  //      #quiz
  //      #verbal_responses
  //      finish
  //    ]
  //    when TALK then [
  //      talk_demo
  //    ]
  //    else [
  //      train_basic1
  //      pre_test_intro1
  //      pre_test_intro2
  //      pre_test
  //      divider_pretest_training    
  //      training
  //      divider_training_test
  //      test_block_intro
  //      post_test
  //      #quiz
  //      #verbal_responses
  //      finish
  //      ]
  if (DEBUG) {
    // train
    // test
    // check_returning
    // check_code
    experiment_timeline = [training, post_test, finish];
  } else {
    experiment_timeline = (function() {
      var tl;
      tl = [];
      if (STAGE1) {
        tl.push(retention_instruction);
      }
      if (STAGE2) {
        tl.push(check_returning);
      }
      //tl.push instruct_loop
      if (!STAGE2) {
        tl.push(train_basic1);
        tl.push(pre_test_intro1);
        tl.push(pre_test_intro2);
        tl.push(pre_test);
        tl.push(divider_pretest_training);
        tl.push(training);
      }
      if (!STAGE1) {
        tl.push(test_block_intro);
        tl.push(post_test);
      }
      if (STAGE1) {
        tl.push(ask_email);
      } else {
        tl.push(finish);
      }
      return tl;
    })();
  }
  // ================================================ #
  // ========= START AND END THE EXPERIMENT ========= #
  // ================================================ #

  // bonus is the total score multiplied by something
  calculateBonus = function() {
    var bonus;
    bonus = SCORE * PARAMS.bonusRate;
    bonus = (Math.round(bonus * 100)) / 100; // round to nearest cent
    return Math.max(0, bonus);
  };
  reprompt = null;
  save_data = function() {
    return psiturk.saveData({
      success: function() {
        console.log('Data saved to psiturk server.');
        if (reprompt != null) {
          window.clearInterval(reprompt);
        }
        return psiturk.computeBonus('compute_bonus', psiturk.completeHIT);
      },
      error: function() {
        return prompt_resubmit;
      }
    });
  };
  prompt_resubmit = function() {
    $('#jspsych-target').html("<h1>Oops!</h1>\n<p>\nSomething went wrong submitting your HIT.\nThis might happen if you lose your internet connection.\nPress the button to resubmit.\n</p>\n<button id=\"resubmit\">Resubmit</button>");
    return $('#resubmit').click(function() {
      $('#jspsych-target').html('Trying to resubmit...');
      reprompt = window.setTimeout(prompt_resubmit, 10000);
      return save_data();
    });
  };
  return jsPsych.init({
    display_element: $('#jspsych-target'),
    timeline: experiment_timeline,
    // show_progress_bar: true
    on_finish: function() {
      if (DEBUG) {
        return jsPsych.data.displayData();
      } else {
        psiturk.recordUnstructuredData('final_bonus', calculateBonus());
        return save_data();
      }
    },
    on_data_update: function(data) {
      console.log('data', data);
      return psiturk.recordTrialData(data);
    }
  });
};
